// Generated by Dagger (https://google.github.io/dagger).
package tomaszkopacz.meetbam.di;

import com.google.firebase.database.FirebaseDatabase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import tomaszkopacz.meetbam.interactor.DatabaseService;

public final class FirebaseModule_ProvideDatabaseServiceFactory
    implements Factory<DatabaseService> {
  private final FirebaseModule module;

  private final Provider<FirebaseDatabase> databaseProvider;

  public FirebaseModule_ProvideDatabaseServiceFactory(
      FirebaseModule module, Provider<FirebaseDatabase> databaseProvider) {
    this.module = module;
    this.databaseProvider = databaseProvider;
  }

  @Override
  public DatabaseService get() {
    return Preconditions.checkNotNull(
        module.provideDatabaseService(databaseProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static FirebaseModule_ProvideDatabaseServiceFactory create(
      FirebaseModule module, Provider<FirebaseDatabase> databaseProvider) {
    return new FirebaseModule_ProvideDatabaseServiceFactory(module, databaseProvider);
  }

  public static DatabaseService proxyProvideDatabaseService(
      FirebaseModule instance, FirebaseDatabase database) {
    return Preconditions.checkNotNull(
        instance.provideDatabaseService(database),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
