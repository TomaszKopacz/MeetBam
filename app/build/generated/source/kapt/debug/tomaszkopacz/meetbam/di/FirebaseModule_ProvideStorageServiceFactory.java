// Generated by Dagger (https://google.github.io/dagger).
package tomaszkopacz.meetbam.di;

import com.google.firebase.storage.FirebaseStorage;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import tomaszkopacz.meetbam.interactor.StorageService;

public final class FirebaseModule_ProvideStorageServiceFactory implements Factory<StorageService> {
  private final FirebaseModule module;

  private final Provider<FirebaseStorage> firebaseStorageProvider;

  public FirebaseModule_ProvideStorageServiceFactory(
      FirebaseModule module, Provider<FirebaseStorage> firebaseStorageProvider) {
    this.module = module;
    this.firebaseStorageProvider = firebaseStorageProvider;
  }

  @Override
  public StorageService get() {
    return Preconditions.checkNotNull(
        module.provideStorageService(firebaseStorageProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static FirebaseModule_ProvideStorageServiceFactory create(
      FirebaseModule module, Provider<FirebaseStorage> firebaseStorageProvider) {
    return new FirebaseModule_ProvideStorageServiceFactory(module, firebaseStorageProvider);
  }

  public static StorageService proxyProvideStorageService(
      FirebaseModule instance, FirebaseStorage firebaseStorage) {
    return Preconditions.checkNotNull(
        instance.provideStorageService(firebaseStorage),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
